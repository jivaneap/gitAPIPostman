{
	
	"info": {
		"_postman_id": "85bac128-d791-4607-9e2c-a506b23bda22",
		"name": "GitHub automation",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25356952"
	},
	"item": [
		{
			"name": "create repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"});\r",
							"\r",
							"repoName=pm.environment.get(\"randomName\");\r",
							"\r",
							"pm.test(\"verify repo name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(repoName);\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo description\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.description).to.eql(\"our beautiful galaxy\");\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo privacy\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.private).to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let x = Math.floor((Math.random() * 100) + 1);\r",
							"\r",
							"let y = Math.floor((Math.random() * 100) + 1);\r",
							"\r",
							"pm.environment.set(\"randomName\", x + \"Milkyway\" + y);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"{{randomName}}\",\r\n    \"description\":\"our beautiful galaxy\",\r\n    \"private\":false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/user/repos",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"user",
						"repos"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"});\r",
							"\r",
							"repoName = pm.variables.get(\"randomName\");\r",
							"pm.test(\"verify repo name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(repoName);\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo description\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.description).to.eql(\"our beautiful galaxy\");\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo privacy\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.private).to.eql(false);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/jivaneap/{{randomName}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"jivaneap",
						"{{randomName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"});\r",
							"\r",
							"repoName=pm.environment.get(\"randomName\");\r",
							"\r",
							"pm.test(\"verify repo name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(repoName);\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo description\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.description).to.eql(\"best galaxy ever\");\r",
							"});\r",
							"\r",
							"pm.test(\"verify repo privacy\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.private).to.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"description\":\"best galaxy ever\",\r\n    \"private\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api.github.com/repos/jivaneap/{{randomName}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"jivaneap",
						"{{randomName}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete repo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code name has string\", function () {\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 1200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://api.github.com/repos/jivaneap/{{randomName}}",
					"protocol": "https",
					"host": [
						"api",
						"github",
						"com"
					],
					"path": [
						"repos",
						"jivaneap",
						"{{randomName}}"
					]
				}
			},
			"response": []
		}
	]
}